<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Reports - Finance Tracker</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <!-- Chart.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-wallet me-2"></i>Finance Tracker
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home me-1"></i> Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/reports"><i class="fas fa-chart-bar me-1"></i> Reports</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container my-4">
        <!-- Flash Messages -->
        <% if(locals.success_msg) { %>
            <div class="alert alert-success alert-dismissible fade show">
                <%= success_msg %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>
        
        <% if(locals.error_msg) { %>
            <div class="alert alert-danger alert-dismissible fade show">
                <%= error_msg %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>

        <h2 class="mb-4">
            <i class="fas fa-chart-line me-2"></i>Financial Reports
        </h2>

        <div class="row">
            <!-- Month Selector -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="fas fa-calendar-alt me-2"></i>Select Month</h5>
                    </div>
                    <div class="card-body">
                        <% if(yearMonths.length > 0) { %>
                            <p class="card-text">Select a month to view detailed financial report and statistics.</p>
                            <div class="list-group">
                                <% yearMonths.forEach(ym => { %>
                                    <button type="button" class="list-group-item list-group-item-action month-selector" 
                                            data-year="<%= ym.year %>" data-month="<%= ym.month %>">
                                        <i class="far fa-calendar me-2"></i><%= ym.label %>
                                    </button>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="text-center py-4">
                                <i class="fas fa-info-circle fa-3x text-muted mb-3"></i>
                                <p>No transaction data available yet.</p>
                                <a href="/" class="btn btn-primary">
                                    <i class="fas fa-plus-circle me-2"></i>Add Transactions
                                </a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Report Overview -->
            <div class="col-lg-8 mb-4">
                <div class="card shadow-sm" id="reportCard" style="display: none;">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0" id="reportTitle"><i class="fas fa-file-alt me-2"></i>Monthly Report</h5>
                        <div>
                            <a href="#" id="downloadReportBtn" class="btn btn-sm btn-light" download>
                                <i class="fas fa-file-pdf me-2"></i>Download PDF
                            </a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-4 mb-3 mb-md-0">
                                <div class="border rounded p-3 text-center">
                                    <h6 class="text-success mb-2">
                                        <i class="fas fa-coins me-2"></i>Total Income
                                    </h6>
                                    <h3 id="totalIncome">$0.00</h3>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3 mb-md-0">
                                <div class="border rounded p-3 text-center">
                                    <h6 class="text-danger mb-2">
                                        <i class="fas fa-credit-card me-2"></i>Total Expenses
                                    </h6>
                                    <h3 id="totalExpense">$0.00</h3>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="border rounded p-3 text-center">
                                    <h6 class="text-primary mb-2">
                                        <i class="fas fa-balance-scale me-2"></i>Net Balance
                                    </h6>
                                    <h3 id="netBalance">$0.00</h3>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Income Chart -->
                            <div class="col-md-6 mb-4">
                                <h5 class="mb-3">Income Breakdown</h5>
                                <div class="chart-container" style="position: relative; height: 200px;">
                                    <canvas id="incomeChart"></canvas>
                                </div>
                                <div id="incomeChartLegend" class="mt-3"></div>
                            </div>
                            
                            <!-- Expense Chart -->
                            <div class="col-md-6 mb-4">
                                <h5 class="mb-3">Expense Breakdown</h5>
                                <div class="chart-container" style="position: relative; height: 200px;">
                                    <canvas id="expenseChart"></canvas>
                                </div>
                                <div id="expenseChartLegend" class="mt-3"></div>
                            </div>
                        </div>

                        <!-- Transaction List -->
                        <h5 class="mb-3">
                            <i class="fas fa-list me-2"></i>Transactions
                        </h5>
                        <div class="table-responsive">
                            <table class="table table-hover table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th class="text-end">Amount</th>
                                    </tr>
                                </thead>
                                <tbody id="transactionList">
                                    <!-- Transactions will be loaded here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- No Month Selected Message -->
                <div class="card shadow-sm" id="noReportCard">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-chart-bar fa-4x text-muted mb-3"></i>
                        <h4>No Month Selected</h4>
                        <p class="text-muted">Please select a month from the list to view detailed financial reports.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer bg-light py-3 mt-5">
        <div class="container text-center">
            <span class="text-muted">Â© <%= new Date().getFullYear() %> Finance Tracker | Made with <i class="fas fa-heart text-danger"></i></span>
        </div>
    </footer>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Chart colors
            const chartColors = [
                '#4CAF50', '#2196F3', '#FF9800', '#E91E63', '#9C27B0', 
                '#00BCD4', '#CDDC39', '#795548', '#607D8B', '#F44336'
            ];
            
            // Format currency
            function formatCurrency(amount) {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                }).format(amount);
            }
            
            // Get month name
            function getMonthName(monthNumber) {
                const months = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                return months[monthNumber];
            }
            
            // Charts instances
            let incomeChart = null;
            let expenseChart = null;

            // Month selector click handler
            const monthSelectors = document.querySelectorAll('.month-selector');
            monthSelectors.forEach(selector => {
                selector.addEventListener('click', function() {
                    // Update active state
                    monthSelectors.forEach(s => s.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Get selected month and year
                    const year = parseInt(this.dataset.year);
                    const month = parseInt(this.dataset.month);
                    
                    // Update report title
                    document.getElementById('reportTitle').innerHTML = 
                        `<i class="fas fa-file-alt me-2"></i>${getMonthName(month)} ${year} Report`;
                    
                    // Update download link
                    const downloadBtn = document.getElementById('downloadReportBtn');
                    downloadBtn.href = `/reports/download/${year}/${month}`;
                    
                    // Show report card
                    document.getElementById('reportCard').style.display = 'block';
                    document.getElementById('noReportCard').style.display = 'none';
                    
                    // Load data for selected month
                    loadMonthlyData(year, month);
                });
            });
            
            // Load monthly data
            function loadMonthlyData(year, month) {
                fetch(`/api/monthly-data/${year}/${month}`)
                    .then(response => response.json())
                    .then(data => {
                        // Process data
                        const { categories, transactions } = data;
                        
                        // Calculate totals
                        let totalIncome = 0;
                        let totalExpense = 0;
                        
                        transactions.forEach(transaction => {
                            if (transaction.type === 'income') {
                                totalIncome += parseFloat(transaction.amount);
                            } else {
                                totalExpense += parseFloat(transaction.amount);
                            }
                        });
                        
                        const balance = totalIncome - totalExpense;
                        
                        // Update summary
                        document.getElementById('totalIncome').textContent = formatCurrency(totalIncome);
                        document.getElementById('totalExpense').textContent = formatCurrency(totalExpense);
                        document.getElementById('netBalance').textContent = formatCurrency(balance);
                        
                        // Update transaction list
                        renderTransactionList(transactions);
                        
                        // Update charts
                        renderCharts(categories);
                    })
                    .catch(error => {
                        console.error('Error fetching monthly data:', error);
                        alert('Error loading data. Please try again.');
                    });
            }
            
            // Render transaction list
            function renderTransactionList(transactions) {
                const transactionList = document.getElementById('transactionList');
                
                if (transactions.length === 0) {
                    transactionList.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center py-4">
                                <div class="text-muted">
                                    <i class="fas fa-info-circle me-2"></i>No transactions found for this month.
                                </div>
                            </td>
                        </tr>
                    `;
                    return;
                }
                
                transactionList.innerHTML = '';
                
                // Sort by date, newest first
                transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                transactions.forEach(transaction => {
                    const date = new Date(transaction.date);
                    const formattedDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>
                            <strong>${transaction.title}</strong>
                            ${transaction.description ? `<div class="small text-muted">${transaction.description}</div>` : ''}
                        </td>
                        <td>
                            <span class="badge ${transaction.type === 'income' ? 'bg-success' : 'bg-secondary'}">
                                ${transaction.category}
                            </span>
                        </td>
                        <td class="text-end ${transaction.type === 'income' ? 'text-success' : 'text-danger'}">
                            <strong>
                                ${transaction.type === 'income' ? '+' : '-'}
                                ${formatCurrency(transaction.amount)}
                            </strong>
                        </td>
                    `;
                    
                    transactionList.appendChild(row);
                });
            }
            
            // Render charts
            function renderCharts(categories) {
                // Prepare data for charts
                const incomeData = [];
                const incomeLabels = [];
                const incomeColors = [];
                
                const expenseData = [];
                const expenseLabels = [];
                const expenseColors = [];
                
                let i = 0;
                let j = 0;
                
                for (const [category, data] of Object.entries(categories)) {
                    if (data.income > 0) {
                        incomeData.push(data.income);
                        incomeLabels.push(category);
                        incomeColors.push(chartColors[i % chartColors.length]);
                        i++;
                    }
                    
                    if (data.expense > 0) {
                        expenseData.push(data.expense);
                        expenseLabels.push(category);
                        expenseColors.push(chartColors[j % chartColors.length]);
                        j++;
                    }
                }
                
                // Create income chart
                if (incomeChart) {
                    incomeChart.destroy();
                }
                
                if (incomeData.length > 0) {
                    incomeChart = new Chart(document.getElementById('incomeChart'), {
                        type: 'doughnut',
                        data: {
                            labels: incomeLabels,
                            datasets: [{
                                data: incomeData,
                                backgroundColor: incomeColors,
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.raw;
                                            const label = context.label || '';
                                            return `${label}: ${formatCurrency(value)}`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    
                    // Create custom legend
                    renderCustomLegend('incomeChartLegend', incomeLabels, incomeColors, incomeData);
                } else {
                    document.getElementById('incomeChartLegend').innerHTML = '<div class="text-center text-muted">No income data for this period</div>';
                    document.getElementById('incomeChart').style.display = 'none';
                }
                
                // Create expense chart
                if (expenseChart) {
                    expenseChart.destroy();
                }
                
                if (expenseData.length > 0) {
                    expenseChart = new Chart(document.getElementById('expenseChart'), {
                        type: 'doughnut',
                        data: {
                            labels: expenseLabels,
                            datasets: [{
                                data: expenseData,
                                backgroundColor: expenseColors,
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.raw;
                                            const label = context.label || '';
                                            return `${label}: ${formatCurrency(value)}`;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    
                    // Create custom legend
                    renderCustomLegend('expenseChartLegend', expenseLabels, expenseColors, expenseData);
                } else {
                    document.getElementById('expenseChartLegend').innerHTML = '<div class="text-center text-muted">No expense data for this period</div>';
                    document.getElementById('expenseChart').style.display = 'none';
                }
            }
            
            // Render custom chart legend
            function renderCustomLegend(elementId, labels, colors, data) {
                const total = data.reduce((sum, value) => sum + value, 0);
                const legendElement = document.getElementById(elementId);
                legendElement.innerHTML = '';
                
                const legendHtml = document.createElement('div');
                legendHtml.className = 'row';
                
                labels.forEach((label, i) => {
                    const percentage = ((data[i] / total) * 100).toFixed(1);
                    const itemHtml = document.createElement('div');
                    itemHtml.className = 'col-6 mb-2';
                    itemHtml.innerHTML = `
                        <div class="d-flex align-items-center">
                            <div style="width: 12px; height: 12px; background-color: ${colors[i]}; margin-right: 8px;"></div>
                            <div class="small">
                                ${label}: ${formatCurrency(data[i])} (${percentage}%)
                            </div>
                        </div>
                    `;
                    legendHtml.appendChild(itemHtml);
                });
                
                legendElement.appendChild(legendHtml);
            }
        });
    </script>
</body>
</html>